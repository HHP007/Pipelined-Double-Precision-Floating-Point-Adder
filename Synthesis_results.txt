
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/mkFPadd/src/mkFPadd.v
Parsing SystemVerilog input from `/openlane/designs/mkFPadd/src/mkFPadd.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\mkFPadd'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/hierarchy.dot'.
Dumping module mkFPadd to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \mkFPadd

3.2. Analyzing design hierarchy..
Top module:  \mkFPadd
Removed 0 unused modules.
Renaming module mkFPadd to mkFPadd.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \mkFPadd

5.2. Analyzing design hierarchy..
Top module:  \mkFPadd
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199 in module mkFPadd.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~42 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
     1/41: $0\result[63:0]
     2/41: $0\overflow[0:0]
     3/41: $0\operation[0:0]
     4/41: $0\mantissa_result[54:0]
     5/41: $0\mantissa_6[7:0]
     6/41: $0\mantissa_5[7:0]
     7/41: $0\mantissa_4_b3[7:0]
     8/41: $0\mantissa_4[7:0]
     9/41: $0\mantissa_3_b3[7:0]
    10/41: $0\mantissa_3[7:0]
    11/41: $0\mantissa_2_b3[7:0]
    12/41: $0\mantissa_2_b2[7:0]
    13/41: $0\mantissa_2[7:0]
    14/41: $0\mantissa_1_b3[7:0]
    15/41: $0\mantissa_1_b2[7:0]
    16/41: $0\mantissa_1[7:0]
    17/41: $0\man_B_b3[54:0]
    18/41: $0\man_B_b2[54:0]
    19/41: $0\man_B_b1[54:0]
    20/41: $0\man_B[54:0]
    21/41: $0\man_A_b3[54:0]
    22/41: $0\man_A_b2[54:0]
    23/41: $0\man_A_b1[54:0]
    24/41: $0\man_A[54:0]
    25/41: $0\got_B[0:0]
    26/41: $0\got_A[0:0]
    27/41: $0\exp_diff_b4[10:0]
    28/41: $0\exp_diff_b3[10:0]
    29/41: $0\exp_diff_b2[10:0]
    30/41: $0\exp_diff_b1[10:0]
    31/41: $0\exp_diff_b0[10:0]
    32/41: $0\exp_b4[10:0]
    33/41: $0\exp_b3[10:0]
    34/41: $0\exp_b2[10:0]
    35/41: $0\exp_b1[10:0]
    36/41: $0\exp[10:0]
    37/41: $0\cout6[0:0]
    38/41: $0\cout4[0:0]
    39/41: $0\cout2[0:0]
    40/41: $0\b[63:0]
    41/41: $0\a[63:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mkFPadd.\a' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$406' with positive edge clock.
Creating register for signal `\mkFPadd.\b' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$407' with positive edge clock.
Creating register for signal `\mkFPadd.\cout2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$408' with positive edge clock.
Creating register for signal `\mkFPadd.\cout4' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$409' with positive edge clock.
Creating register for signal `\mkFPadd.\cout6' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$410' with positive edge clock.
Creating register for signal `\mkFPadd.\exp' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$411' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_b1' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$412' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$413' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$414' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_b4' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$415' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_diff_b0' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$416' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_diff_b1' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$417' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_diff_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$418' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_diff_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$419' with positive edge clock.
Creating register for signal `\mkFPadd.\exp_diff_b4' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$420' with positive edge clock.
Creating register for signal `\mkFPadd.\got_A' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$421' with positive edge clock.
Creating register for signal `\mkFPadd.\got_B' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$422' with positive edge clock.
Creating register for signal `\mkFPadd.\man_A' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$423' with positive edge clock.
Creating register for signal `\mkFPadd.\man_A_b1' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$424' with positive edge clock.
Creating register for signal `\mkFPadd.\man_A_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$425' with positive edge clock.
Creating register for signal `\mkFPadd.\man_A_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$426' with positive edge clock.
Creating register for signal `\mkFPadd.\man_B' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$427' with positive edge clock.
Creating register for signal `\mkFPadd.\man_B_b1' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$428' with positive edge clock.
Creating register for signal `\mkFPadd.\man_B_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$429' with positive edge clock.
Creating register for signal `\mkFPadd.\man_B_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$430' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_1' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$431' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_1_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$432' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_1_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$433' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$434' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_2_b2' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$435' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_2_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$436' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$437' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_3_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$438' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_4' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$439' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_4_b3' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$440' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_5' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$441' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_6' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$442' with positive edge clock.
Creating register for signal `\mkFPadd.\mantissa_result' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$443' with positive edge clock.
Creating register for signal `\mkFPadd.\operation' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$444' with positive edge clock.
Creating register for signal `\mkFPadd.\overflow' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$445' with positive edge clock.
Creating register for signal `\mkFPadd.\result' using process `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
  created $dff cell `$procdff$446' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 42 empty switches in `\mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
Removing empty process `mkFPadd.$proc$/openlane/designs/mkFPadd/src/mkFPadd.v:824$199'.
Cleaned up 42 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module mkFPadd...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~54 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 5 unused cells and 229 unused wires.
<suppressed ~8 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
<suppressed ~180 debug messages>
Removed a total of 60 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:574$51: \mantissa_result -> { 1'0 \mantissa_result [53:0] }
      Replacing known input bits on port B of cell $ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:802$182: \IF_mantissa_result_83_BIT_54_84_THEN_NEG_manti_ETC___d186 [53:1] -> { 1'1 \IF_mantissa_result_83_BIT_54_84_THEN_NEG_manti_ETC___d186 [52:1] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$446 ($dff) from module mkFPadd (D = $procmux$201_Y, Q = \result, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$447 ($sdff) from module mkFPadd (D = { \mantissa_result [54] \exponent_final__h4284 \mantissa_temp_1277_SL_theResult_____1282__q5 [51:0] }, Q = \result).
Adding EN signal on $procdff$444 ($dff) from module mkFPadd (D = 1'0, Q = \operation).
Adding SRST signal on $procdff$443 ($dff) from module mkFPadd (D = $procmux$216_Y, Q = \mantissa_result, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$450 ($sdff) from module mkFPadd (D = { \IF_operation_THEN_mantissa_7_raw943_ELSE_manti_ETC__q4 [6:0] \mantissa_6 \mantissa_5 \mantissa_4_b3 \mantissa_3_b3 \mantissa_2_b3 \mantissa_1_b3 }, Q = \mantissa_result).
Adding SRST signal on $procdff$442 ($dff) from module mkFPadd (D = $procmux$221_Y, Q = \mantissa_6, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$452 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_b2_27_BIT_ETC___d153 [7:0], Q = \mantissa_6).
Adding SRST signal on $procdff$441 ($dff) from module mkFPadd (D = $procmux$226_Y, Q = \mantissa_5, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$454 ($sdff) from module mkFPadd (D = \IF_operation_THEN_mantissa_5_raw445_ELSE_manti_ETC__q3 [7:0], Q = \mantissa_5).
Adding SRST signal on $procdff$440 ($dff) from module mkFPadd (D = $procmux$231_Y, Q = \mantissa_4_b3, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$456 ($sdff) from module mkFPadd (D = \mantissa_4, Q = \mantissa_4_b3).
Adding SRST signal on $procdff$439 ($dff) from module mkFPadd (D = $procmux$236_Y, Q = \mantissa_4, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$458 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_b1_2_BITS_ETC___d118 [7:0], Q = \mantissa_4).
Adding SRST signal on $procdff$438 ($dff) from module mkFPadd (D = $procmux$241_Y, Q = \mantissa_3_b3, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$460 ($sdff) from module mkFPadd (D = \mantissa_3, Q = \mantissa_3_b3).
Adding SRST signal on $procdff$437 ($dff) from module mkFPadd (D = $procmux$246_Y, Q = \mantissa_3, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$462 ($sdff) from module mkFPadd (D = \IF_operation_THEN_mantissa_3_raw803_ELSE_manti_ETC__q2 [7:0], Q = \mantissa_3).
Adding SRST signal on $procdff$436 ($dff) from module mkFPadd (D = $procmux$251_Y, Q = \mantissa_2_b3, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$464 ($sdff) from module mkFPadd (D = \mantissa_2_b2, Q = \mantissa_2_b3).
Adding SRST signal on $procdff$435 ($dff) from module mkFPadd (D = $procmux$256_Y, Q = \mantissa_2_b2, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$466 ($sdff) from module mkFPadd (D = \mantissa_2, Q = \mantissa_2_b2).
Adding SRST signal on $procdff$434 ($dff) from module mkFPadd (D = $procmux$261_Y, Q = \mantissa_2, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$468 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_3_BITS_15_ETC___d85 [7:0], Q = \mantissa_2).
Adding SRST signal on $procdff$433 ($dff) from module mkFPadd (D = $procmux$266_Y, Q = \mantissa_1_b3, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$470 ($sdff) from module mkFPadd (D = \mantissa_1_b2, Q = \mantissa_1_b3).
Adding SRST signal on $procdff$432 ($dff) from module mkFPadd (D = $procmux$271_Y, Q = \mantissa_1_b2, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$472 ($sdff) from module mkFPadd (D = \mantissa_1, Q = \mantissa_1_b2).
Adding SRST signal on $procdff$431 ($dff) from module mkFPadd (D = $procmux$276_Y, Q = \mantissa_1, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$474 ($sdff) from module mkFPadd (D = \IF_operation_THEN_mantissa_1_raw227_ELSE_manti_ETC__q1 [7:0], Q = \mantissa_1).
Adding SRST signal on $procdff$430 ($dff) from module mkFPadd (D = $procmux$281_Y, Q = \man_B_b3, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$476 ($sdff) from module mkFPadd (D = \man_B_b2, Q = \man_B_b3).
Adding SRST signal on $procdff$429 ($dff) from module mkFPadd (D = $procmux$286_Y, Q = \man_B_b2, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$478 ($sdff) from module mkFPadd (D = \man_B_b1, Q = \man_B_b2).
Adding SRST signal on $procdff$428 ($dff) from module mkFPadd (D = $procmux$291_Y, Q = \man_B_b1, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$480 ($sdff) from module mkFPadd (D = \man_B, Q = \man_B_b1).
Adding SRST signal on $procdff$427 ($dff) from module mkFPadd (D = $procmux$296_Y, Q = \man_B, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$482 ($sdff) from module mkFPadd (D = \man_B$D_IN, Q = \man_B).
Adding SRST signal on $procdff$426 ($dff) from module mkFPadd (D = $procmux$301_Y, Q = \man_A_b3, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$484 ($sdff) from module mkFPadd (D = \man_A_b2, Q = \man_A_b3).
Adding SRST signal on $procdff$425 ($dff) from module mkFPadd (D = $procmux$306_Y, Q = \man_A_b2, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$486 ($sdff) from module mkFPadd (D = \man_A_b1, Q = \man_A_b2).
Adding SRST signal on $procdff$424 ($dff) from module mkFPadd (D = $procmux$311_Y, Q = \man_A_b1, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$488 ($sdff) from module mkFPadd (D = \man_A, Q = \man_A_b1).
Adding SRST signal on $procdff$423 ($dff) from module mkFPadd (D = $procmux$316_Y, Q = \man_A, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$490 ($sdff) from module mkFPadd (D = \man_A$D_IN, Q = \man_A).
Adding SRST signal on $procdff$422 ($dff) from module mkFPadd (D = $procmux$321_Y, Q = \got_B, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$492 ($sdff) from module mkFPadd (D = 1'1, Q = \got_B).
Adding SRST signal on $procdff$421 ($dff) from module mkFPadd (D = $procmux$326_Y, Q = \got_A, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$494 ($sdff) from module mkFPadd (D = 1'1, Q = \got_A).
Adding SRST signal on $procdff$420 ($dff) from module mkFPadd (D = $procmux$331_Y, Q = \exp_diff_b4, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$496 ($sdff) from module mkFPadd (D = \exp_diff_b3, Q = \exp_diff_b4).
Adding SRST signal on $procdff$419 ($dff) from module mkFPadd (D = $procmux$336_Y, Q = \exp_diff_b3, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$498 ($sdff) from module mkFPadd (D = \exp_diff_b2, Q = \exp_diff_b3).
Adding SRST signal on $procdff$418 ($dff) from module mkFPadd (D = $procmux$341_Y, Q = \exp_diff_b2, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$500 ($sdff) from module mkFPadd (D = \exp_diff_b1, Q = \exp_diff_b2).
Adding SRST signal on $procdff$417 ($dff) from module mkFPadd (D = $procmux$346_Y, Q = \exp_diff_b1, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$502 ($sdff) from module mkFPadd (D = \exp_diff_b0, Q = \exp_diff_b1).
Adding SRST signal on $procdff$416 ($dff) from module mkFPadd (D = $procmux$351_Y, Q = \exp_diff_b0, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$504 ($sdff) from module mkFPadd (D = \exp_diff__h1362, Q = \exp_diff_b0).
Adding SRST signal on $procdff$415 ($dff) from module mkFPadd (D = $procmux$356_Y, Q = \exp_b4, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$506 ($sdff) from module mkFPadd (D = \exp_b3, Q = \exp_b4).
Adding SRST signal on $procdff$414 ($dff) from module mkFPadd (D = $procmux$361_Y, Q = \exp_b3, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$508 ($sdff) from module mkFPadd (D = \exp_b2, Q = \exp_b3).
Adding SRST signal on $procdff$413 ($dff) from module mkFPadd (D = $procmux$366_Y, Q = \exp_b2, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$510 ($sdff) from module mkFPadd (D = \exp_b1, Q = \exp_b2).
Adding SRST signal on $procdff$412 ($dff) from module mkFPadd (D = $procmux$371_Y, Q = \exp_b1, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$512 ($sdff) from module mkFPadd (D = \exp, Q = \exp_b1).
Adding SRST signal on $procdff$411 ($dff) from module mkFPadd (D = $procmux$376_Y, Q = \exp, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:266:slice$514 ($sdff) from module mkFPadd (D = \IF_a_BITS_62_TO_52_EQ_0b11111111111_AND_a_BITS_ETC___d40 [62:52], Q = \exp).
Adding SRST signal on $procdff$410 ($dff) from module mkFPadd (D = $procmux$381_Y, Q = \cout6, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$516 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_b2_27_BIT_ETC___d153 [8], Q = \cout6).
Adding SRST signal on $procdff$409 ($dff) from module mkFPadd (D = $procmux$386_Y, Q = \cout4, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$518 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_b1_2_BITS_ETC___d118 [8], Q = \cout4).
Adding SRST signal on $procdff$408 ($dff) from module mkFPadd (D = $procmux$391_Y, Q = \cout2, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$520 ($sdff) from module mkFPadd (D = \IF_operation_2_THEN_0b0_CONCAT_man_A_3_BITS_15_ETC___d85 [8], Q = \cout2).
Adding SRST signal on $procdff$407 ($dff) from module mkFPadd (D = $procmux$396_Y, Q = \b, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$522 ($sdff) from module mkFPadd (D = \put_B_b_in, Q = \b).
Adding SRST signal on $procdff$406 ($dff) from module mkFPadd (D = $procmux$401_Y, Q = \a, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$524 ($sdff) from module mkFPadd (D = \put_A_a_in, Q = \a).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$449 ($dffe) from module mkFPadd.

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 79 unused cells and 79 unused wires.
<suppressed ~80 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~7 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 13 unused cells and 10 unused wires.
<suppressed ~23 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 55) from mux cell mkFPadd.$ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:574$51 ($mux).
Removed top 63 bits (of 64) from mux cell mkFPadd.$ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:598$71 ($mux).
Removed top 2 bits (of 3) from mux cell mkFPadd.$ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:740$159 ($mux).
Removed top 2 bits (of 3) from mux cell mkFPadd.$ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:769$165 ($mux).
Removed top 2 bits (of 55) from port A of cell mkFPadd.$shr$/openlane/designs/mkFPadd/src/mkFPadd.v:769$166 ($shr).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:786$168 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:786$168 ($add).
Removed top 8 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:788$170 ($add).
Removed top 8 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:790$172 ($add).
Removed top 8 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:792$174 ($add).
Removed top 8 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:794$176 ($add).
Removed top 8 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:796$178 ($add).
Removed top 7 bits (of 8) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180 ($add).
Removed top 1 bits (of 8) from port Y of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180 ($add).
Removed top 1 bits (of 8) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180 ($add).
Removed top 1 bits (of 53) from port Y of cell mkFPadd.$shl$/openlane/designs/mkFPadd/src/mkFPadd.v:800$181 ($shl).
Removed top 1 bits (of 55) from port Y of cell mkFPadd.$neg$/openlane/designs/mkFPadd/src/mkFPadd.v:805$183 ($neg).
Removed top 1 bits (of 55) from port A of cell mkFPadd.$neg$/openlane/designs/mkFPadd/src/mkFPadd.v:805$183 ($neg).
Removed top 2 bits (of 55) from port A of cell mkFPadd.$neg$/openlane/designs/mkFPadd/src/mkFPadd.v:806$184 ($neg).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:809$187 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:809$187 ($add).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:811$189 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:811$189 ($add).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:813$191 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:813$191 ($add).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:815$193 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:815$193 ($add).
Removed top 1 bits (of 9) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:817$195 ($add).
Removed top 1 bits (of 9) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:817$195 ($add).
Removed top 1 bits (of 8) from port A of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:819$197 ($add).
Removed top 1 bits (of 8) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:819$197 ($add).
Removed top 1 bits (of 8) from port Y of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:819$197 ($add).
Removed top 10 bits (of 11) from port B of cell mkFPadd.$add$/openlane/designs/mkFPadd/src/mkFPadd.v:820$198 ($add).
Removed top 2 bits (of 3) from wire mkFPadd.$ternary$/openlane/designs/mkFPadd/src/mkFPadd.v:769$165_Y.
Removed top 1 bits (of 55) from wire mkFPadd.IF_mantissa_result_83_BIT_54_84_THEN_NEG_manti_ETC___d186.
Removed top 1 bits (of 8) from wire mkFPadd.IF_operation_THEN_mantissa_7_raw943_ELSE_manti_ETC__q4.
Removed top 63 bits (of 64) from wire mkFPadd._theResult_____10_fst__h1584.
Removed top 3 bits (of 55) from wire mkFPadd._theResult_____9__h1361.
Removed top 8 bits (of 9) from wire mkFPadd.cout1__h2293.
Removed top 8 bits (of 9) from wire mkFPadd.cout3__h2870.
Removed top 8 bits (of 9) from wire mkFPadd.cout5__h3512.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp1_A_1__h2160.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp1_B_1__h2161.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp2_A_2__h2162.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp2_B_2__h2163.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp3_A__h2671.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp3_B__h2672.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp4_A__h2673.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp4_B__h2674.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp5_A__h3247.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp5_B__h3248.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp6_A__h3249.
Removed top 1 bits (of 9) from wire mkFPadd.man_temp6_B__h3250.
Removed top 1 bits (of 8) from wire mkFPadd.man_temp7_A__h3889.
Removed top 1 bits (of 8) from wire mkFPadd.man_temp7_B__h3890.
Removed top 7 bits (of 55) from wire mkFPadd.mantissa_result$D_IN.
Removed top 1 bits (of 53) from wire mkFPadd.mantissa_temp_1277_SL_theResult_____1282__q5.
Removed top 1 bits (of 55) from wire mkFPadd.mantissa_temp__h4162.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mkFPadd:
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:786$168 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:788$170 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:790$172 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:792$174 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:794$176 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:796$178 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:809$187 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:811$189 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:813$191 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:815$193 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:817$195 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:819$197 ($add).
  creating $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:820$198 ($add).
  creating $macc model for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:805$183 ($neg).
  creating $macc model for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:806$184 ($neg).
  creating $macc model for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:807$185 ($neg).
  creating $macc model for $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:756$161 ($sub).
  creating $macc model for $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:763$163 ($sub).
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:819$197 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180.
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:817$195 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:796$178.
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:815$193 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:794$176.
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:813$191 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:792$174.
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:811$189 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:790$172.
  merging $macc model for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:809$187 into $add$/openlane/designs/mkFPadd/src/mkFPadd.v:788$170.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:820$198.
  creating $alu model for $macc $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:805$183.
  creating $alu model for $macc $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:806$184.
  creating $alu model for $macc $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:807$185.
  creating $alu model for $macc $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:756$161.
  creating $alu model for $macc $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:763$163.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:796$178.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:794$176.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:792$174.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:790$172.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:788$170.
  creating $alu model for $macc $add$/openlane/designs/mkFPadd/src/mkFPadd.v:786$168.
  creating $alu model for $lt$/openlane/designs/mkFPadd/src/mkFPadd.v:745$160 ($lt): new $alu
  creating $alu cell for $lt$/openlane/designs/mkFPadd/src/mkFPadd.v:745$160: $auto$alumacc.cc:485:replace_alu$552
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:786$168: $auto$alumacc.cc:485:replace_alu$563
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:788$170: $auto$alumacc.cc:485:replace_alu$566
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:790$172: $auto$alumacc.cc:485:replace_alu$569
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:792$174: $auto$alumacc.cc:485:replace_alu$572
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:794$176: $auto$alumacc.cc:485:replace_alu$575
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:796$178: $auto$alumacc.cc:485:replace_alu$578
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:798$180: $auto$alumacc.cc:485:replace_alu$581
  creating $alu cell for $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:763$163: $auto$alumacc.cc:485:replace_alu$584
  creating $alu cell for $sub$/openlane/designs/mkFPadd/src/mkFPadd.v:756$161: $auto$alumacc.cc:485:replace_alu$587
  creating $alu cell for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:807$185: $auto$alumacc.cc:485:replace_alu$590
  creating $alu cell for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:806$184: $auto$alumacc.cc:485:replace_alu$593
  creating $alu cell for $neg$/openlane/designs/mkFPadd/src/mkFPadd.v:805$183: $auto$alumacc.cc:485:replace_alu$596
  creating $alu cell for $add$/openlane/designs/mkFPadd/src/mkFPadd.v:820$198: $auto$alumacc.cc:485:replace_alu$599
  created 14 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~2 debug messages>

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 7 unused cells and 8 unused wires.
<suppressed ~15 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~30 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$ec32b97001540459632a2df9accd677d3703ea0f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$constmap:0a37f835b922771149f2926f680c7f3f694730e6$paramod$941032f945df5d5ef1b4b15250a873f3b567a978\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$1f4894e91c506198be6530778ca2fb7875835f94\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:84d30bc096a7b35edd3bb5f8acaba2a017772424$paramod$475ee5e839e5a31803d6e6c7d2f8207302994908\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$2f5fb04daf2da94d981bf9455fa4454c6ec8b705\_90_alu for cells of type $alu.
Using template $paramod$c946eda38aee5f25c2e283fac204818e2eb79102\_90_alu for cells of type $alu.
Using template $paramod$287622ef75bfef6d2866b24ee0ddd8b566be8a6a\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
No more expansions possible.
<suppressed ~3668 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~1450 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
<suppressed ~168 debug messages>
Removed a total of 56 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 290 unused cells and 879 unused wires.
<suppressed ~291 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\mkFPadd' to `<abc-temp-dir>/input.blif'..
Extracted 3872 gates and 4192 wires to a netlist network with 318 inputs and 252 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      325
ABC RESULTS:              NAND cells:       83
ABC RESULTS:              XNOR cells:      119
ABC RESULTS:               XOR cells:      211
ABC RESULTS:               AND cells:       27
ABC RESULTS:               NOR cells:      252
ABC RESULTS:                OR cells:     1179
ABC RESULTS:             ORNOT cells:       76
ABC RESULTS:               MUX cells:     1172
ABC RESULTS:            ANDNOT cells:      538
ABC RESULTS:        internal signals:     3622
ABC RESULTS:           input signals:      318
ABC RESULTS:          output signals:      252
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.
<suppressed ~54 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 1 unused cells and 1097 unused wires.
<suppressed ~20 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \mkFPadd

40.2. Analyzing design hierarchy..
Top module:  \mkFPadd
Removed 0 unused modules.

41. Printing statistics.

=== mkFPadd ===

   Number of wires:               3911
   Number of wire bits:           6540
   Number of public wires:         182
   Number of public wire bits:    2811
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4679
     $_ANDNOT_                     538
     $_AND_                         27
     $_MUX_                       1172
     $_NAND_                        83
     $_NOR_                        252
     $_NOT_                        324
     $_ORNOT_                       76
     $_OR_                        1179
     $_SDFFE_PN0P_                 698
     $_XNOR_                       119
     $_XOR_                        211

42. Executing CHECK pass (checking for obvious problems).
Checking module mkFPadd...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/post_techmap.dot'.
Dumping module mkFPadd to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkFPadd..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkFPadd.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkFPadd'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkFPadd.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 0 unused cells and 115 unused wires.
<suppressed ~115 debug messages>

47. Printing statistics.

=== mkFPadd ===

   Number of wires:               3796
   Number of wire bits:           5130
   Number of public wires:          67
   Number of public wire bits:    1401
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4679
     $_ANDNOT_                     538
     $_AND_                         27
     $_MUX_                       1172
     $_NAND_                        83
     $_NOR_                        252
     $_NOT_                        324
     $_ORNOT_                       76
     $_OR_                        1179
     $_SDFFE_PN0P_                 698
     $_XNOR_                       119
     $_XOR_                        211

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/yuk/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/yuk/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/yuk/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/yuk/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mkFPadd':
  mapped 698 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== mkFPadd ===

   Number of wires:               5192
   Number of wire bits:           6526
   Number of public wires:          67
   Number of public wire bits:    1401
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6075
     $_ANDNOT_                     538
     $_AND_                         27
     $_MUX_                       2568
     $_NAND_                        83
     $_NOR_                        252
     $_NOT_                        324
     $_ORNOT_                       76
     $_OR_                        1179
     $_XNOR_                       119
     $_XOR_                        211
     sky130_fd_sc_hd__dfxtp_2      698

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\mkFPadd' to `/tmp/yosys-abc-bDZ7tL/input.blif'..
Extracted 5377 gates and 6208 wires to a netlist network with 829 inputs and 698 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-bDZ7tL/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-bDZ7tL/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-bDZ7tL/input.blif 
ABC: + read_lib -w /openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/mkFPadd/runs/RUN_2023.12.10_16.56.20/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   3920 ( 14.1 %)   Cap = 10.8 ff (  5.1 %)   Area =    33190.58 ( 81.7 %)   Delay = 12856.47 ps  (  4.4 %)               
ABC: Path  0 --     621 : 0    4 pi                        A =   0.00  Df =  32.2  -18.6 ps  S =  50.3 ps  Cin =  0.0 ff  Cout =   9.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2584 : 4    1 sky130_fd_sc_hd__or4_4    A =  11.26  Df = 518.6 -377.8 ps  S =  77.6 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 534.7 ff  G =   98  
ABC: Path  2 --    2588 : 4    1 sky130_fd_sc_hd__or4_4    A =  11.26  Df =1044.2 -802.7 ps  S =  77.9 ps  Cin =  2.4 ff  Cout =   2.6 ff  Cmax = 534.7 ff  G =  102  
ABC: Path  3 --    2598 : 4    3 sky130_fd_sc_hd__or4_4    A =  11.26  Df =1582.2-1213.1 ps  S =  97.2 ps  Cin =  2.4 ff  Cout =  11.9 ff  Cmax = 534.7 ff  G =  467  
ABC: Path  4 --    2599 : 2    2 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =1683.1-1280.2 ps  S =  80.0 ps  Cin =  4.4 ff  Cout =   4.2 ff  Cmax = 141.9 ff  G =   91  
ABC: Path  5 --    2601 : 2    3 sky130_fd_sc_hd__and2_4   A =   8.76  Df =1836.9-1282.6 ps  S =  50.3 ps  Cin =  2.4 ff  Cout =   9.8 ff  Cmax = 539.3 ff  G =  386  
ABC: Path  6 --    2611 : 2    2 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =1875.2-1220.5 ps  S = 107.9 ps  Cin =  4.4 ff  Cout =   7.3 ff  Cmax = 141.9 ff  G =  153  
ABC: Path  7 --    2615 : 2    7 sky130_fd_sc_hd__or2_4    A =   8.76  Df =2125.3-1263.5 ps  S =  73.4 ps  Cin =  2.4 ff  Cout =  19.7 ff  Cmax = 514.5 ff  G =  790  
ABC: Path  8 --    2626 : 2    4 sky130_fd_sc_hd__and2_4   A =   8.76  Df =2295.5 -976.0 ps  S =  49.6 ps  Cin =  2.4 ff  Cout =   9.5 ff  Cmax = 539.3 ff  G =  385  
ABC: Path  9 --    2627 : 4    2 sky130_fd_sc_hd__o22a_2   A =  10.01  Df =2497.8 -552.4 ps  S =  50.3 ps  Cin =  2.4 ff  Cout =   6.6 ff  Cmax = 304.9 ff  G =  265  
ABC: Path 10 --    2634 : 3    3 sky130_fd_sc_hd__a21boi_2 A =  11.26  Df =2673.8 -416.4 ps  S = 151.5 ps  Cin =  3.6 ff  Cout =   9.6 ff  Cmax = 129.1 ff  G =  257  
ABC: Path 11 --    2650 : 3    2 sky130_fd_sc_hd__nand3b_2 A =  11.26  Df =2776.3 -432.8 ps  S =  79.8 ps  Cin =  3.5 ff  Cout =   7.2 ff  Cmax = 263.7 ff  G =  195  
ABC: Path 12 --    2655 : 2    4 sky130_fd_sc_hd__or2_4    A =   8.76  Df =3031.4 -550.5 ps  S =  59.8 ps  Cin =  2.4 ff  Cout =  14.2 ff  Cmax = 514.5 ff  G =  567  
ABC: Path 13 --    2677 : 4    4 sky130_fd_sc_hd__or4_4    A =  11.26  Df =3591.4 -970.0 ps  S = 101.9 ps  Cin =  2.4 ff  Cout =  14.1 ff  Cmax = 534.7 ff  G =  557  
ABC: Path 14 --    2693 : 4    5 sky130_fd_sc_hd__or4b_4   A =  13.76  Df =4153.2-1388.6 ps  S = 105.0 ps  Cin =  2.2 ff  Cout =  15.6 ff  Cmax = 533.8 ff  G =  676  
ABC: Path 15 --    2712 : 4    4 sky130_fd_sc_hd__or4b_4   A =  13.76  Df =4709.6-1804.8 ps  S = 101.1 ps  Cin =  2.2 ff  Cout =  13.6 ff  Cmax = 533.8 ff  G =  590  
ABC: Path 16 --    2730 : 4    4 sky130_fd_sc_hd__or4b_4   A =  13.76  Df =5267.1-2222.1 ps  S = 102.5 ps  Cin =  2.2 ff  Cout =  14.4 ff  Cmax = 533.8 ff  G =  624  
ABC: Path 17 --    2748 : 4    4 sky130_fd_sc_hd__or4_4    A =  11.26  Df =5822.8-2637.9 ps  S = 102.5 ps  Cin =  2.4 ff  Cout =  14.4 ff  Cmax = 534.7 ff  G =  570  
ABC: Path 18 --    2766 : 4    3 sky130_fd_sc_hd__or4_4    A =  11.26  Df =6370.3-3051.5 ps  S =  97.5 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 534.7 ff  G =  468  
ABC: Path 19 --    2780 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =6754.7-3318.7 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 20 --    2786 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =7001.7-3449.3 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 514.5 ff  G =  468  
ABC: Path 21 --    2797 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =7371.1-3701.5 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 22 --    2803 : 2    4 sky130_fd_sc_hd__or2_4    A =   8.76  Df =7622.4-3831.8 ps  S =  59.0 ps  Cin =  2.4 ff  Cout =  13.8 ff  Cmax = 514.5 ff  G =  547  
ABC: Path 23 --    2817 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =7992.8-4083.1 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 24 --    2823 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =8239.8-4213.7 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 514.5 ff  G =  468  
ABC: Path 25 --    2837 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =8609.2-4465.9 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 26 --    2843 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =8856.2-4596.5 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 514.5 ff  G =  468  
ABC: Path 27 --    2853 : 3    3 sky130_fd_sc_hd__or3_4    A =  11.26  Df =9231.1-4849.7 ps  S =  73.2 ps  Cin =  2.4 ff  Cout =   9.1 ff  Cmax = 531.9 ff  G =  368  
ABC: Path 28 --    2860 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =9479.4-4979.7 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 514.5 ff  G =  468  
ABC: Path 29 --    2873 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =9848.7-5231.9 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 30 --    2878 : 2    4 sky130_fd_sc_hd__or2_4    A =   8.76  Df =10100.1-5362.2 ps  S =  59.0 ps  Cin =  2.4 ff  Cout =  13.8 ff  Cmax = 514.5 ff  G =  547  
ABC: Path 31 --    2891 : 3    4 sky130_fd_sc_hd__or3_4    A =  11.26  Df =10488.5-5616.1 ps  S =  81.2 ps  Cin =  2.4 ff  Cout =  13.9 ff  Cmax = 531.9 ff  G =  557  
ABC: Path 32 --    2904 : 2    2 sky130_fd_sc_hd__or2_4    A =   8.76  Df =10729.9-5745.4 ps  S =  49.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 514.5 ff  G =  284  
ABC: Path 33 --    2911 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =11097.0-5999.9 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 34 --    2917 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =11344.0-6130.4 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.9 ff  Cmax = 514.5 ff  G =  469  
ABC: Path 35 --    2928 : 3    2 sky130_fd_sc_hd__or3_4    A =  11.26  Df =11713.4-6382.6 ps  S =  69.8 ps  Cin =  2.4 ff  Cout =   7.2 ff  Cmax = 531.9 ff  G =  288  
ABC: Path 36 --    2934 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =11960.4-6513.2 ps  S =  56.2 ps  Cin =  2.4 ff  Cout =  11.9 ff  Cmax = 514.5 ff  G =  469  
ABC: Path 37 --    2944 : 3    3 sky130_fd_sc_hd__or3_4    A =  11.26  Df =12337.7-6766.7 ps  S =  74.7 ps  Cin =  2.4 ff  Cout =  10.0 ff  Cmax = 531.9 ff  G =  405  
ABC: Path 38 --    2950 : 4    1 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =12592.3-6869.3 ps  S =  51.8 ps  Cin =  2.4 ff  Cout =   4.5 ff  Cmax = 271.9 ff  G =  181  
ABC: Path 39 --    2951 : 5    1 sky130_fd_sc_hd__o221a_4  A =  20.02  Df =12856.5 -104.7 ps  S = 128.1 ps  Cin =  4.5 ff  Cout =  33.4 ff  Cmax = 488.0 ff  G =  743  
ABC: Start-point = pi620 (\b [39]).  End-point = po295 ($auto$rtlil.cc:2669:MuxGate$14083).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  829/  698  lat =    0  nd =  3920  edge =  10729  area =33194.13  delay =42.00  lev = 42
ABC: + write_blif /tmp/yosys-abc-bDZ7tL/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4b_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o221a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       81
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      519
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      294
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:      112
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      182
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      254
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:      128
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       74
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       56
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      195
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      155
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       63
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      502
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:      499
ABC RESULTS:        internal signals:     4681
ABC RESULTS:           input signals:      829
ABC RESULTS:          output signals:      698
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkFPadd..
Removed 0 unused cells and 6524 unused wires.
<suppressed ~568 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module mkFPadd...
Warning: Wire mkFPadd.\get_res [63] is used but has no driver.
Warning: Wire mkFPadd.\get_res [62] is used but has no driver.
Warning: Wire mkFPadd.\get_res [61] is used but has no driver.
Warning: Wire mkFPadd.\get_res [60] is used but has no driver.
Warning: Wire mkFPadd.\get_res [59] is used but has no driver.
Warning: Wire mkFPadd.\get_res [58] is used but has no driver.
Warning: Wire mkFPadd.\get_res [57] is used but has no driver.
Warning: Wire mkFPadd.\get_res [56] is used but has no driver.
Warning: Wire mkFPadd.\get_res [55] is used but has no driver.
Warning: Wire mkFPadd.\get_res [54] is used but has no driver.
Warning: Wire mkFPadd.\get_res [53] is used but has no driver.
Warning: Wire mkFPadd.\get_res [52] is used but has no driver.
Warning: Wire mkFPadd.\get_res [51] is used but has no driver.
Warning: Wire mkFPadd.\get_res [50] is used but has no driver.
Warning: Wire mkFPadd.\get_res [49] is used but has no driver.
Warning: Wire mkFPadd.\get_res [48] is used but has no driver.
Warning: Wire mkFPadd.\get_res [47] is used but has no driver.
Warning: Wire mkFPadd.\get_res [46] is used but has no driver.
Warning: Wire mkFPadd.\get_res [45] is used but has no driver.
Warning: Wire mkFPadd.\get_res [44] is used but has no driver.
Warning: Wire mkFPadd.\get_res [43] is used but has no driver.
Warning: Wire mkFPadd.\get_res [42] is used but has no driver.
Warning: Wire mkFPadd.\get_res [41] is used but has no driver.
Warning: Wire mkFPadd.\get_res [40] is used but has no driver.
Warning: Wire mkFPadd.\get_res [39] is used but has no driver.
Warning: Wire mkFPadd.\get_res [38] is used but has no driver.
Warning: Wire mkFPadd.\get_res [37] is used but has no driver.
Warning: Wire mkFPadd.\get_res [36] is used but has no driver.
Warning: Wire mkFPadd.\get_res [35] is used but has no driver.
Warning: Wire mkFPadd.\get_res [34] is used but has no driver.
Warning: Wire mkFPadd.\get_res [33] is used but has no driver.
Warning: Wire mkFPadd.\get_res [32] is used but has no driver.
Warning: Wire mkFPadd.\get_res [31] is used but has no driver.
Warning: Wire mkFPadd.\get_res [30] is used but has no driver.
Warning: Wire mkFPadd.\get_res [29] is used but has no driver.
Warning: Wire mkFPadd.\get_res [28] is used but has no driver.
Warning: Wire mkFPadd.\get_res [27] is used but has no driver.
Warning: Wire mkFPadd.\get_res [26] is used but has no driver.
Warning: Wire mkFPadd.\get_res [25] is used but has no driver.
Warning: Wire mkFPadd.\get_res [24] is used but has no driver.
Warning: Wire mkFPadd.\get_res [23] is used but has no driver.
Warning: Wire mkFPadd.\get_res [22] is used but has no driver.
Warning: Wire mkFPadd.\get_res [21] is used but has no driver.
Warning: Wire mkFPadd.\get_res [20] is used but has no driver.
Warning: Wire mkFPadd.\get_res [19] is used but has no driver.
Warning: Wire mkFPadd.\get_res [18] is used but has no driver.
Warning: Wire mkFPadd.\get_res [17] is used but has no driver.
Warning: Wire mkFPadd.\get_res [16] is used but has no driver.
Warning: Wire mkFPadd.\get_res [15] is used but has no driver.
Warning: Wire mkFPadd.\get_res [14] is used but has no driver.
Warning: Wire mkFPadd.\get_res [13] is used but has no driver.
Warning: Wire mkFPadd.\get_res [12] is used but has no driver.
Warning: Wire mkFPadd.\get_res [11] is used but has no driver.
Warning: Wire mkFPadd.\get_res [10] is used but has no driver.
Warning: Wire mkFPadd.\get_res [9] is used but has no driver.
Warning: Wire mkFPadd.\get_res [8] is used but has no driver.
Warning: Wire mkFPadd.\get_res [7] is used but has no driver.
Warning: Wire mkFPadd.\get_res [6] is used but has no driver.
Warning: Wire mkFPadd.\get_res [5] is used but has no driver.
Warning: Wire mkFPadd.\get_res [4] is used but has no driver.
Warning: Wire mkFPadd.\get_res [3] is used but has no driver.
Warning: Wire mkFPadd.\get_res [2] is used but has no driver.
Warning: Wire mkFPadd.\get_res [1] is used but has no driver.
Warning: Wire mkFPadd.\get_res [0] is used but has no driver.
Warning: Wire mkFPadd.\RDY_put_B is used but has no driver.
Warning: Wire mkFPadd.\RDY_put_A is used but has no driver.
Warning: Wire mkFPadd.\RDY_get_res is used but has no driver.
Found and reported 67 problems.

61. Printing statistics.

=== mkFPadd ===

   Number of wires:               4565
   Number of wire bits:           4754
   Number of public wires:         645
   Number of public wire bits:     834
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4621
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2       64
     sky130_fd_sc_hd__a211oi_2       4
     sky130_fd_sc_hd__a21bo_2       15
     sky130_fd_sc_hd__a21boi_2      11
     sky130_fd_sc_hd__a21o_2       155
     sky130_fd_sc_hd__a21oi_2       74
     sky130_fd_sc_hd__a221o_2       12
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2        53
     sky130_fd_sc_hd__a22oi_2       24
     sky130_fd_sc_hd__a2bb2o_2       2
     sky130_fd_sc_hd__a31o_2        32
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__a32o_2        10
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__and2_2       254
     sky130_fd_sc_hd__and2_4         2
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        56
     sky130_fd_sc_hd__and3b_2        5
     sky130_fd_sc_hd__and4_2         7
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        519
     sky130_fd_sc_hd__buf_2          2
     sky130_fd_sc_hd__conb_1         3
     sky130_fd_sc_hd__dfxtp_2      698
     sky130_fd_sc_hd__inv_2         32
     sky130_fd_sc_hd__mux2_1        69
     sky130_fd_sc_hd__mux2_2       294
     sky130_fd_sc_hd__mux4_2        45
     sky130_fd_sc_hd__nand2_2      195
     sky130_fd_sc_hd__nand2b_2      10
     sky130_fd_sc_hd__nand3_2        6
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        3
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2       182
     sky130_fd_sc_hd__nor2b_2        4
     sky130_fd_sc_hd__nor3_2         8
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o2111a_2       3
     sky130_fd_sc_hd__o2111ai_2      1
     sky130_fd_sc_hd__o211a_2      499
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2       112
     sky130_fd_sc_hd__o21ai_2       63
     sky130_fd_sc_hd__o21ba_2       38
     sky130_fd_sc_hd__o21bai_2       3
     sky130_fd_sc_hd__o221a_2      128
     sky130_fd_sc_hd__o221a_4        1
     sky130_fd_sc_hd__o221ai_2       4
     sky130_fd_sc_hd__o22a_2         7
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o311a_2       11
     sky130_fd_sc_hd__o31a_2        33
     sky130_fd_sc_hd__o31ai_2        9
     sky130_fd_sc_hd__o32a_2        19
     sky130_fd_sc_hd__o41a_2         3
     sky130_fd_sc_hd__or2_2        502
     sky130_fd_sc_hd__or2_4         11
     sky130_fd_sc_hd__or2b_2         8
     sky130_fd_sc_hd__or3_2         50
     sky130_fd_sc_hd__or3_4         11
     sky130_fd_sc_hd__or3b_2        10
     sky130_fd_sc_hd__or4_2         49
     sky130_fd_sc_hd__or4_4         12
     sky130_fd_sc_hd__or4b_2        33
     sky130_fd_sc_hd__or4b_4         3
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       81
     sky130_fd_sc_hd__xor2_2        43

   Chip area for module '\mkFPadd': 48048.582400

62. Executing Verilog backend.
Dumping module `\mkFPadd'.

Warnings: 68 unique messages, 68 total
End of script. Logfile hash: c4b9f43cec, CPU: user 3.26s system 0.03s, MEM: 47.94 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 72% 2x abc (8 sec), 7% 33x opt_expr (0 sec), ...
